#include<iostream>
#include <vector>
#include <ctime>
#include<conio.h>
using namespace std;
#define L 20
#define B 25

const int speed=1;

void textcolor(int color) {
    if(color==-1) {
        cout<<"\x1b[39m";
    } else {
        cout<<"\x1b[38;5;"<<color<<"m";
    }
}

void bgcolor(int color) {
    if(color==-1) {
        cout<<"\x1b[49m";
    }
    else {
        cout<<"\x1b[48;5;"<<color<<"m";
    }
}

class board {
public:
    char location[L][B];
    int points;
    board() {
        for(int i =0; i<L; i++) {
            for(int j=0; j<B; j++) {
                if (!i || !j) {
                    location[i][j]='w';
                } else if(i==L-1 || j==B-1) {
                    location[i][j]='w';
                }
                else {
                    location[i][j]=' ';
                }
            }
        }
        points=0;
    }
    void display() {
        clrscr();
        cout<<"Points:"<<points<<endl;
        for(int i =0; i<L; i++) {
            for(int j=0; j<B; j++) {
                if(location[i][j]!='w') {
                    bgcolor(0);
                }
                else {
                    bgcolor(1);
                }
                if(location[i][j]==' ' || location[i][j]=='w') {
                    cout<<" ";
                    continue;
                }
                if(location[i][j]=='t' || location[i][j]=='0') {
                    textcolor(3);
                    cout <<'o';
                } else if(location[i][j]=='+') {
                    textcolor(2);
                    cout<<location[i][j];
                } else {
                    textcolor(3);
                    cout<<location[i][j];
                }
            }
            cout << endl;
        }
        textcolor(-1);
        bgcolor(-1);
    }
    bool compare(board &a) {
        for(int i =0; i<L; i++) {
            for(int j=0; j<B; j++) {
                if(location[i][j]==a.location[i][j]) {
                    continue;
                } else {
                    return 0;
                }
            }
        }
        return 1;
    }
    bool isempty(int x,int y) {
        return (location[x][y]==' ');
    }
    bool isfood(int x,int y) {
        return (location[x][y]=='+');
    }
    bool isfilled(int x,int y) {
        return (!(isempty(x,y)));
    }
};

class snake {
public:
    char head='0';
    vector<int> direction;
    char body='o';
    char tail='t';
    int length;
    vector<int> xpos;
    vector<int> ypos;
    snake(board &a) {
        length=4;
        a.location[7][12]=head;
        xpos.push_back(7);
        ypos.push_back(12);
        for(int i=1; i<length-1; i++) {
            a.location[7][12-i]=body;
            xpos.push_back(7);
            ypos.push_back(12-i);
        }
        a.location[7][13-length]=tail;
        xpos.push_back(7);
        ypos.push_back(13-length);
        direction.push_back(0);
        direction.push_back(1);
    }
    void move(board &a) {
        if(a.isempty(xpos.at(0)+direction.at(0),ypos.at(0)+direction.at(1))) {
            a.location[xpos.at(0)+direction.at(0)][ypos.at(0)+direction.at(1)]=head;
            a.location[xpos.at(0)][ypos.at(0)]=' ';
            for(int i=0; i<length-2; i++) {
                a.location[xpos.at(i)][ypos.at(i)]=body;
                a.location[xpos.at(1+i)][ypos.at(1+i)]=' ';
            }
            a.location[xpos.at(length-2)][ypos.at(length-2)]=tail;
            a.location[xpos.at(length-1)][ypos.at(length-1)]=' ';
            this->updatepos(a);
        } else if(a.isfood(xpos.at(0)+direction.at(0),ypos.at(0)+direction.at(1))) {
            a.location[xpos.at(0)+direction.at(0)][ypos.at(0)+direction.at(1)]=head;
            a.location[xpos.at(0)][ypos.at(0)]=body;
            length++;
            xpos.insert(xpos.begin(),xpos.at(0)+direction.at(0));
            ypos.insert(ypos.begin(),ypos.at(0)+direction.at(1));
        }
        usleep(100000/speed);
    }
    void updatepos(board &a) {
        for(int i=length-2; i>=0; i--) {
            xpos.at(i+1)=xpos.at(i);
            ypos.at(i+1)=ypos.at(i);
        }
        xpos.at(0)+=direction.at(0);
        ypos.at(0)+=direction.at(1);
    }
    void changedirection() {
        char ch;
        if(kbhit()) {
            ch=getchar();
            if(ch=='s') {
                if(!(direction.at(0))) {
                    direction.at(0)=1;
                    direction.at(1)=0;
                }
            } else if(ch=='w') {
                if(!(direction.at(0))) {
                    direction.at(0)=-1;
                    direction.at(1)=0;
                }
            } else if(ch=='d') {
                if(!(direction.at(1))) {
                    direction.at(0)=0;
                    direction.at(1)=1;
                }
            } else if(ch=='a') {
                if(!(direction.at(1))) {
                    direction.at(0)=0;
                    direction.at(1)=-1;
                }
            }
        }
    }
};

class food {
public:
    char symbol;
    food(char ch='+') {
        symbol=ch;
    }
    void spawn(board &a) {
        int x,y;
        srand(time(NULL));
        while(1) {
            x=rand()%L;
            y=rand()%B;
            if(a.isempty(x,y) && x>1 && y>1 && x<L-2 && y<B-2) {
                a.location[x][y]=symbol;
                break;
            }
        }
    }
};

int food_amount(board &a) {
    int sum=0;
    for(int i=0; i<L; i++) {
        for(int j=0; j<B; j++) {
            if(a.location[i][j]=='+') {
                sum++;
            }
        }
    }
    return sum;
}

int main()
{
    int x;
    int highscore=0;
    while(1) {
        board a;
        snake s(a);
        food f;
        f.spawn(a);
        getchar();
        x=1;
        while(x) {
            board spare(a);
            s.move(a);
            s.changedirection();
            if(!food_amount(a)) {
                f.spawn(a);
                a.points++;
            } else if (spare.compare(a)) {
                x=0;
                highscore=max(highscore,a.points);
                cout<<"Highscore:"<<highscore<<endl;
                break;
            }
            a.display();
        }
    }
    return 0;
}
